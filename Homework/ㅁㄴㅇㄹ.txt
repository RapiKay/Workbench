변수란?

- 흔히 상수와 비교됨. 프로그래밍에 있어서 없어서는 안됨

- 언제든지 저장된 값이 변경될 수 있는 공간

- 반면에 상수란 한 번 정해지면 값을 변경할 필요가 없는 데이터
===============================================
#include <stdio.h>

int main(void)
{
	int x;              ( x 라는 이름의 변수를 만든다. x 라는 변수는 int값을 가짐을 선언.  x라는 변수에는 이제 오직 정수만이 들어갈 수 있다. )   
	x = 5;  	        ( x는 5임을 선언 )
	printf("%d", x);  ( %d : 이 자리에는 int값이 들어간다. int 값의 x를 %d에 대입, 출력
	return 0;
}
===============================================
#include <stdio.h>

int main(void)
{
	int x;                              ( int형은 어떠한 변수던 상관없이 4바이트만큼 차지함 , 우리 렘에서 4바이트를 차지함, x 는 int값을 가짐을 선언 )
	x = 5;			( x 는 5 임을 선언 )
	printf("변수 x의 메모리 크기는 %d입니다.", sizeof(x));      (sizeof()는 하나의 약속된 C언어에서 제공되는 기본적인 함수, 현재 괄호 안에 들어가있는 변수의 메모리 크기가 얼마인지 알려줌 )           
	return 0;
}
===============================================
#include <stdio.h>

int main(void)
{
	int x = 50;
	float y = 123456789.123456789;       ( float은 실수 범위 또한 저장할 수 있다, float인 y에 123456789.123456789 임을 선언, 그러나 float은 123456789.123456789 라는 숫자는 저장할 수 없다. 크기가 4 바이트를 넘어가기 때문. )
	double z = 123456789.123456789;
	printf("x = %d\n, x");                  (   \n은 줄바꿈으로 편하게 Enter라 생각할 수 있다. x = 5 를 프린트 )
	printf("y = %.2f\n", y);		( %.2f는 실수에서 소수점 뒤에 2자리 수 까지 출력한다. y = 123456789.12 를 프린트 )
	printf("z = %.2f\n", z);
	return 0
}
===============================================
#include <stdio.h>
#include <limits.h>

int main(void)
{
	int x = INT_MAX;               			( int 형 x에 int형에서 가질 수 있는 가장 큰 값(INT_MAX)를 넣어줌 )
	printf("int형의 최댓값 x는 %d입니다.\n", x);		( int형의 최댓값 x는 2147483647입니다. 출력 후 줄바꿈 )
	printf("X + 1은 %d입니다.\n", x + 1);			( int형에서 가장 큰 값을 가지고 있는 x에 1을 더함으로써 int로 표현할 수 있는 숫자의 한계를 넘어섰다. 이로인해 오버플로우 현상이 발생하여 int형으로 표현할 수 있는 최솟값이 프린팅된다. X + 1은 -2147483648입니다. 를 프린트 )
	
	return 0;
}
===============================================
#include <stdio.h>

int main(void)
{
	int x = 10;				( int 형의 x은 10 임을 선언 )
	int y = 20;				( int 형의 y는 20 임을 선언 )
	printf("x = %d입니다.\n", x);			( x = 10입니다. 를 프린트. 줄바꿈 )
	printf("y = %d입니다.\n", y);			( y = 20입니다. 를 프린트. 줄바꿈 )
	printf("x + y = %d입니다.\n", x + y);		( x + y = 30입니다. 를 프린트. 줄바꿈 )
	printf("x - y = %d입니다.\n", x - y);		( x - y = 10입니다. 를 프린트. 줄바꿈 )
	printf("x * y = %d입니다.\n", x * y);		( x * y = 200입니다. 를 프린트. 줄바꿈 )
	printf("x / y = %d입니다.\n", x / y);		( x / y = 0입니다. 를 프린트. 줄바꿈  , x / y 를 하여 나온 값이 0인 이유는 몫만이 나왔기 때문 )
	return 0;
	
 } 